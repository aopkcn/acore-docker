name: 艾泽拉斯+机器人构建Docker发布

on:
  push:
    branches: [master]
    paths-ignore:
      - 'Version.txt'

jobs:
  build-ubuntu:
    name: 检查版本
    runs-on: ubuntu-20.04
    outputs:
      skip_build: ${{ steps.get_commit_id.outputs.skip_build }}
    steps:
      - name: 获取指定项目的提交 ID
        id: get_commit_id
        run: |
          # 使用 GitHub API 获取最新提交的 SHA ID
          CORE_COMMIT_ID=$(curl -s https://api.github.com/repos/liyunfan1223/azerothcore-wotlk/commits/Playerbot?per_page=1 | jq -r '.sha')
          # 获取当前项目的提交 ID
          CURRENT_COMMIT_ID=$(curl -s https://raw.githubusercontent.com/aopkcn/acore-docker/master/Version.txt | tr -d '[:space:]')
          echo "最新 Playerbot 提交 ID: $CORE_COMMIT_ID"
          echo "本地 Playerbot 提交 ID: $CURRENT_COMMIT_ID"
          if [ "$CORE_COMMIT_ID" == "$CURRENT_COMMIT_ID" ]; then
            echo "当前是最新的"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "提交 ID 不同，更新文件"
            echo "skip_build=false" >> $GITHUB_OUTPUT
            # 准备更新 Version.txt
            API_URL="https://api.github.com/repos/${{ github.repository }}/contents/Version.txt"
            # 使用 PUT 请求更新文件
            curl -X PUT $API_URL \
              -H "Authorization: token ${{ secrets.TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{
                "message": "更新提交 ID 为 '"$CORE_COMMIT_ID"'",
                "content": "'"$(echo -n "$CORE_COMMIT_ID" | base64)"'"
              }'
            echo "文件更新成功"
          fi

  publish:
    name: 构建发布
    needs: [build-ubuntu]
    runs-on: ubuntu-latest
    if: needs.build-ubuntu.outputs.skip_build != 'true'
    steps:
      - name: 拉取核心代码
        uses: actions/checkout@v4
        with:
          repository: 'liyunfan1223/azerothcore-wotlk'
          ref: 'Playerbot'

      - name: 拉取当前项目
        uses: actions/checkout@v4
        with:
          ref: 'master'
          path: 'build'

      - name: 拉取Eluna代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/mod-eluna'  
          ref: 'master'
          path: 'modules/mod-eluna'

      - name: 拉取playerbots代码
        uses: actions/checkout@v4
        with:
          repository: 'liyunfan1223/mod-playerbots'  
          ref: 'master'
          path: 'modules/mod-playerbots'

      - name: 登录 Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }} 

      # - name: 登录 GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.TOKEN }}

      # - name: 登录阿里云容器镜像服务
      #   uses: docker/login-action@v3
      #   with:
      #     registry: registry.cn-chengdu.aliyuncs.com 
      #     username: ${{ secrets.ALIYUN_USERNAME }}
      #     password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: 设置构建版本
        id: version
        run: |
          version="bot"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 设置 Docker Buildx 环境
        uses: docker/setup-buildx-action@v3

      - name: 构建 worldserver 
        uses: ./build/.github/docker-build 
        with:
          component-name: worldserver 
          version: ${{ steps.version.outputs.version }} 
          push: true 

      - name: 构建 authserver 
        uses: ./build/.github/docker-build
        with:
          component-name: authserver
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 构建 db-import 
        uses: ./build/.github/docker-build
        with:
          component-name: db-import
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 构建 client-data
        uses: ./build/.github/docker-build
        with:
          component-name: client-data
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 构建 tools
        uses: ./build/.github/docker-build
        with:
          component-name: tools
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 构建 dev-server
        uses: ./build/.github/docker-build
        with:
          component-name: dev
          version: ${{ steps.version.outputs.version }}
          push: true
          dockerfile: apps/docker/Dockerfile.dev-server
